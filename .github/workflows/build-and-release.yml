name: Build and Release Osaurus

on:
  push:
    tags:
      - "*.*.*" # Match semantic versioning without v prefix
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: "Upload to GitHub Release"
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup build environment
        run: bash scripts/setup_env.sh

      - name: Install certificates
        env:
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: bash scripts/install_certificates.sh

      - name: Build Osaurus (ARM64)
        env:
          DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}
          DEVELOPER_ID_NAME: ${{ secrets.DEVELOPER_ID_NAME }}
        run: bash scripts/build_arm64.sh

      - name: Verify App Signing
        run: bash scripts/verify_signing.sh

      - name: Create DMGs
        env:
          DEVELOPER_ID_NAME: ${{ secrets.DEVELOPER_ID_NAME }}
        run: bash scripts/create_dmgs.sh

      - name: Notarize apps
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: bash scripts/notarize.sh

      - name: Get Release Notes from Draft
        id: changelog
        env:
          GH_TOKEN: ${{ github.token }}
        run: bash scripts/get_release_notes.sh

      - name: Generate Release Notes HTML (arm64)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          cat > RELEASE_NOTES.md <<'CHANGELOG_EOF'
          ${{ steps.changelog.outputs.changelog }}
          CHANGELOG_EOF
          bash scripts/generate_release_notes_html.sh

      - name: Create Release in Repository
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
          PUBLIC_REPO: ${{ github.repository }}
        run: bash scripts/create_release.sh

      - name: Generate and Deploy Sparkle Appcast
        if: startsWith(github.ref, 'refs/tags/')
        env:
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
          GH_TOKEN: ${{ github.token }}
          PUBLIC_REPO: ${{ github.repository }}
        run: bash scripts/generate_and_deploy_appcast.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: osaurus-release-${{ env.VERSION }}
          path: |
            build_output/Osaurus-${{ env.VERSION }}.dmg
            build_output/Osaurus.dmg
            updates/arm64/Osaurus-${{ env.VERSION }}.html
            updates/appcast.xml
          if-no-files-found: warn

  mark_released:
    needs: build # wait until the DMG & GitHub release are done
    if: startsWith(github.ref, 'refs/tags/') # only on real release tags
    runs-on: ubuntu-latest

    permissions:
      contents: read # allow checkout
      pull-requests: write # allow label changes

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Switch "pending release" → "released"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # list all merged PRs that still carry "pending release"
          for PR in $(gh pr list \
                --state merged \
                --label "pending release" \
                --json number \
                --jq '.[].number'); do
            echo "🏷  Updating PR #$PR"
            gh pr edit "$PR" \
              --add-label "released" \
              --remove-label "pending release"
          done
